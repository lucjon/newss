#!/bin/bash
testdir=${testdir:-../tests}
profile=no
verbose=no

while [[ "$1" == --* ]]; do
	if [ "$1" == "--profile" ]; then
		profile=yes
	elif [ "$1" == "--verbose" ]; then
		verbose=yes
	fi
	shift
done;

if [ -f "$1" ]; then
	group_option="load_groups_list := \"$1\""
else
	group_option="number_of_groups := $1"
fi
suite=${3:-DefaultTests}
if [ -z "$2" ] || [ "$2" == "default" ]; then
	filename=tests-$(git rev-parse --short HEAD)-$(date "+%s").csv
else
	filename="$2"
fi

script="$(mktemp newss.XXXXXXX.g)"
cat > "$script" <<EOF
LoadPackage("newss");;
ReadPackage("newss", "test/tests.g");;
$(if [ "$profile" == "yes" ]; then cat <<EOP
Print("Profiling...");
NUM_RANDOM_TEST_ELTS := 2^14;
ProfileLineByLine("$testdir/prof-$filename.gz");
EOP
fi) 
$(if [ "$verbose" == "yes" ]; then echo "SetInfoLevel(NewssInfo, 2);"; fi)
results := PerformTests($suite, rec (
	filename := "$testdir/$filename",
	$group_option,
	bsgs_options := rec($bsgs_options)
));;
$(if [ "$profile" == "yes" ]; then cat <<EOP
UnprofileLineByLine();
LoadPackage("profiling");
OutputAnnotatedCodeCoverageFiles("$testdir/prof-$filename.gz", "$testdir/prof-$filename");
EOP
fi)
QUIT_GAP(ForAll(results, t -> t.success));
EOF

${GAP:-gap} --quitonbreak -o 4G "$script"
result=$?
rm $script
exit $result
