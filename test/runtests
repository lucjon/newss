#!/bin/bash
testdir=${testdir:-../tests}
profile=no
verbose=no

while [[ "$1" == -* ]]; do
	if [ "$1" == "--profile" ]; then
		profile=yes
	elif [ "$1" == "--verbose" ]; then
		verbose=yes
	elif [ "$1" == "--coverage" ]; then
		coverage=yes
	elif [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
		cat <<EOF
Usage: $0 [--profile] [--coverage] [--verbose] [(GROUP_COUNT|GROUP_LIST_FILE)
                                               [RESULTS_FILENAME [TEST_SUITE]]]

Runs the set of tests TEST_SUITE against either GROUP_COUNT randomly picked
groups, or the groups in the file GROUP_LIST_FILE, saving the resulting timing
information to the CSV file \$testdir/RESULTS_FILENAME (currently: $testdir).

To generate a GROUP_LIST_FILE, use the script test/pickgroups. If \`default' is
given as the RESULTS_FILENAME, or no filename is given at all, we pick a
filename based on the current time and git commit hash. The TEST_SUITE
parameter defaults to \`DefaultTests'; see test/tests.g for the full list of
options.

OPTIONS
    --profile:  If given, enable line-by-line profiling using the profiling
                package (requires very recent GAP). The resulting profile data
                and report are saved to \$testdir/prof-RESULTS_FILENAME.
	
	--coverage:	If given, collect code coverage information. This is saved to
	            \$testdir/RESULTS_FILENAME.coverage, and a JSON file is
				saved at \$testdir/RESULTS_FILENAME.cov.json.

    --verbose:  Set the info level for the newss package higher, so that
                progress and debug messages are printed.

ENVIRONMENT VARIABLES
    GAP:          Specifies the command line used to invoke GAP (default: gap).

    bsgs_options: Any options to pass to the BSGSFromGroup function when
                  creating stabilizer chains (see the package manual).

EXAMPLES
    $0
        Run the default test suite on 100 groups.
    bsgs_options='Verify := ReturnTrue' $0
        Run the default test suite on 100 groups, but never verify the results
        of the randomized Schreier-Sims algorithm.
    $0 ../hardgroups.grp default NoTests
        Calculate stabilizer chains for the groups in the group list file
        hardgroups.grp, recording timing information in the default location,
        but do not run any of the correctness tests.
EOF
		exit 0
	fi
	shift
done;

if [ -f "$1" ]; then
	group_option="load_groups_list := \"$1\""
else
	group_option="number_of_groups := ${1:-100}"
fi
suite=${3:-DefaultTests}
if [ -z "$2" ] || [ "$2" == "default" ]; then
	filename=tests-$(git rev-parse --short HEAD)-$(date "+%s")
else
	filename="$2"
fi

if [ "$coverage" == "yes" ]; then
	coverage_option=(--cover "$testdir/$filename.coverage")
	echo "Collecting coverage information..."
fi

script="$(mktemp newss.XXXXXXX.g)"
cat > "$script" <<EOF
LoadPackage("newss");;
ReadPackage("newss", "test/tests.g");;
$(if [ "$profile" == "yes" ]; then cat <<EOP
Print("Profiling...");
NUM_RANDOM_TEST_ELTS := 2^14;
ProfileLineByLine("$testdir/prof-$filename.gz");
EOP
fi) 
$(if [ "$verbose" == "yes" ]; then echo "SetInfoLevel(NewssInfo, 2);"; fi)
results := PerformTests($suite, rec (
	filename := "$testdir/$filename.csv",
	$group_option,
	bsgs_options := rec($bsgs_options)
));;
$(if [ "$profile" == "yes" ]; then cat <<EOP
UnprofileLineByLine();
LoadPackage("profiling");
OutputAnnotatedCodeCoverageFiles("$testdir/prof-$filename.gz", "$testdir/prof-$filename");
EOP
fi)
$(if [ "$coverage" == "yes" ]; then cat <<EOP
UnprofileLineByLine();
LoadPackage("profiling");
OutputJsonCoverage("$testdir/$filename.coverage", "$testdir/$filename.cov.json");
EOP
fi)
QUIT_GAP(ForAll(results, t -> t.success));
EOF

${GAP:-gap} "${coverage_option[@]}" --quitonbreak -o 4G "$script"
result=$?

rm $script
if [ "$coverage" == "yes" ]; then
	test/fixup-coverage "$testdir/$filename.cov.json"
fi

exit $result
